// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2017 20:13:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    digitleds
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module digitleds_vlg_sample_tst(
	clk,
	digit1,
	digit2,
	digit3,
	digit4,
	ptflag,
	sampler_tx
);
input  clk;
input [3:0] digit1;
input [3:0] digit2;
input [3:0] digit3;
input [3:0] digit4;
input  ptflag;
output sampler_tx;

reg sample;
time current_time;
always @(clk or digit1 or digit2 or digit3 or digit4 or ptflag)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module digitleds_vlg_check_tst (
	digout,
	led_clk_x,
	led_rst,
	segout,
	sampler_rx
);
input [3:0] digout;
input  led_clk_x;
input  led_rst;
input  segout;
input sampler_rx;

reg [3:0] digout_expected;
reg  led_clk_x_expected;
reg  led_rst_expected;
reg  segout_expected;

reg [3:0] digout_prev;
reg  led_clk_x_prev;
reg  led_rst_prev;
reg  segout_prev;

reg [3:0] digout_expected_prev;
reg  led_clk_x_expected_prev;
reg  led_rst_expected_prev;
reg  segout_expected_prev;

reg [3:0] last_digout_exp;
reg  last_led_clk_x_exp;
reg  last_led_rst_exp;
reg  last_segout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	digout_prev = digout;
	led_clk_x_prev = led_clk_x;
	led_rst_prev = led_rst;
	segout_prev = segout;
end

// update expected /o prevs

always @(trigger)
begin
	digout_expected_prev = digout_expected;
	led_clk_x_expected_prev = led_clk_x_expected;
	led_rst_expected_prev = led_rst_expected;
	segout_expected_prev = segout_expected;
end


// expected digout[ 3 ]
initial
begin
	digout_expected[3] = 1'bX;
end 
// expected digout[ 2 ]
initial
begin
	digout_expected[2] = 1'bX;
end 
// expected digout[ 1 ]
initial
begin
	digout_expected[1] = 1'bX;
end 
// expected digout[ 0 ]
initial
begin
	digout_expected[0] = 1'bX;
end 

// expected led_clk_x
initial
begin
	led_clk_x_expected = 1'bX;
end 

// expected led_rst
initial
begin
	led_rst_expected = 1'bX;
end 

// expected segout
initial
begin
	segout_expected = 1'bX;
end 
// generate trigger
always @(digout_expected or digout or led_clk_x_expected or led_clk_x or led_rst_expected or led_rst or segout_expected or segout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected digout = %b | expected led_clk_x = %b | expected led_rst = %b | expected segout = %b | ",digout_expected_prev,led_clk_x_expected_prev,led_rst_expected_prev,segout_expected_prev);
	$display("| real digout = %b | real led_clk_x = %b | real led_rst = %b | real segout = %b | ",digout_prev,led_clk_x_prev,led_rst_prev,segout_prev);
`endif
	if (
		( digout_expected_prev[0] !== 1'bx ) && ( digout_prev[0] !== digout_expected_prev[0] )
		&& ((digout_expected_prev[0] !== last_digout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digout_expected_prev);
		$display ("     Real value = %b", digout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_digout_exp[0] = digout_expected_prev[0];
	end
	if (
		( digout_expected_prev[1] !== 1'bx ) && ( digout_prev[1] !== digout_expected_prev[1] )
		&& ((digout_expected_prev[1] !== last_digout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digout_expected_prev);
		$display ("     Real value = %b", digout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_digout_exp[1] = digout_expected_prev[1];
	end
	if (
		( digout_expected_prev[2] !== 1'bx ) && ( digout_prev[2] !== digout_expected_prev[2] )
		&& ((digout_expected_prev[2] !== last_digout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digout_expected_prev);
		$display ("     Real value = %b", digout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_digout_exp[2] = digout_expected_prev[2];
	end
	if (
		( digout_expected_prev[3] !== 1'bx ) && ( digout_prev[3] !== digout_expected_prev[3] )
		&& ((digout_expected_prev[3] !== last_digout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digout_expected_prev);
		$display ("     Real value = %b", digout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_digout_exp[3] = digout_expected_prev[3];
	end
	if (
		( led_clk_x_expected_prev !== 1'bx ) && ( led_clk_x_prev !== led_clk_x_expected_prev )
		&& ((led_clk_x_expected_prev !== last_led_clk_x_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_clk_x :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_clk_x_expected_prev);
		$display ("     Real value = %b", led_clk_x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_clk_x_exp = led_clk_x_expected_prev;
	end
	if (
		( led_rst_expected_prev !== 1'bx ) && ( led_rst_prev !== led_rst_expected_prev )
		&& ((led_rst_expected_prev !== last_led_rst_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rst_expected_prev);
		$display ("     Real value = %b", led_rst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_rst_exp = led_rst_expected_prev;
	end
	if (
		( segout_expected_prev !== 1'bx ) && ( segout_prev !== segout_expected_prev )
		&& ((segout_expected_prev !== last_segout_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segout_expected_prev);
		$display ("     Real value = %b", segout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segout_exp = segout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module digitleds_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] digit1;
reg [3:0] digit2;
reg [3:0] digit3;
reg [3:0] digit4;
reg ptflag;
// wires                                               
wire [3:0] digout;
wire led_clk_x;
wire led_rst;
wire segout;

wire sampler;                             

// assign statements (if any)                          
digitleds i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.digit1(digit1),
	.digit2(digit2),
	.digit3(digit3),
	.digit4(digit4),
	.digout(digout),
	.led_clk_x(led_clk_x),
	.led_rst(led_rst),
	.ptflag(ptflag),
	.segout(segout)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2000 1'b1;
	#2000;
end 
// digit1[ 3 ]
initial
begin
	digit1[3] = 1'b0;
end 
// digit1[ 2 ]
initial
begin
	digit1[2] = 1'b0;
end 
// digit1[ 1 ]
initial
begin
	digit1[1] = 1'b0;
end 
// digit1[ 0 ]
initial
begin
	digit1[0] = 1'b1;
end 
// digit2[ 3 ]
initial
begin
	digit2[3] = 1'b0;
end 
// digit2[ 2 ]
initial
begin
	digit2[2] = 1'b0;
end 
// digit2[ 1 ]
initial
begin
	digit2[1] = 1'b1;
end 
// digit2[ 0 ]
initial
begin
	digit2[0] = 1'b0;
end 
// digit3[ 3 ]
initial
begin
	digit3[3] = 1'b0;
end 
// digit3[ 2 ]
initial
begin
	digit3[2] = 1'b0;
end 
// digit3[ 1 ]
initial
begin
	digit3[1] = 1'b1;
end 
// digit3[ 0 ]
initial
begin
	digit3[0] = 1'b1;
end 
// digit4[ 3 ]
initial
begin
	digit4[3] = 1'b0;
end 
// digit4[ 2 ]
initial
begin
	digit4[2] = 1'b1;
end 
// digit4[ 1 ]
initial
begin
	digit4[1] = 1'b0;
end 
// digit4[ 0 ]
initial
begin
	digit4[0] = 1'b0;
end 

// ptflag
initial
begin
	ptflag = 1'b0;
end 

digitleds_vlg_sample_tst tb_sample (
	.clk(clk),
	.digit1(digit1),
	.digit2(digit2),
	.digit3(digit3),
	.digit4(digit4),
	.ptflag(ptflag),
	.sampler_tx(sampler)
);

digitleds_vlg_check_tst tb_out(
	.digout(digout),
	.led_clk_x(led_clk_x),
	.led_rst(led_rst),
	.segout(segout),
	.sampler_rx(sampler)
);
endmodule

